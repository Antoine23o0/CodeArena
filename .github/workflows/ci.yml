name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: api/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run integration tests
        run: npm run test:integration
        env:
          MONGO_URL: mongodb://127.0.0.1:27017/test-db

  frontend:
    name: Frontend Lint & Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: web/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Build
        run: npm run build

  runner:
    name: Python Runner Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Validate runner scripts
        run: python -m compileall runner

  compose:
    name: Docker Compose Smoke Test
    runs-on: ubuntu-latest
    needs:
      - backend
      - frontend
      - runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and start stack
        run: docker compose up --build -d
      - name: Show service status
        run: docker compose ps
      - name: Wait for API readiness
        run: |
          for attempt in {1..30}; do
            if curl -fsS http://127.0.0.1:3000/api/contests > /tmp/api-response.json; then
              python3 - <<'PY'
import json
from pathlib import Path
path = Path('/tmp/api-response.json')
try:
    data = json.loads(path.read_text())
except Exception as exc:  # pragma: no cover
    print(f"Unable to parse contests payload: {exc}")
    raise SystemExit(1)
if isinstance(data, list) and data:
    first = data[0]
    print({'titre': first.get('title'), 'difficulte': first.get('difficulty')})
PY
              exit 0
            fi
            echo "API not ready yet (attempt ${attempt}/30)"
            sleep 5
          done
          echo "API failed to respond in time"
          docker compose logs api
          exit 1
      - name: Wait for frontend readiness
        run: |
          for attempt in {1..30}; do
            if curl -fsS http://127.0.0.1:5173 > /tmp/web-response.html; then
              head -n 20 /tmp/web-response.html
              exit 0
            fi
            echo "Frontend not ready yet (attempt ${attempt}/30)"
            sleep 5
          done
          echo "Frontend failed to start in time"
          docker compose logs web
          exit 1
      - name: Tear down stack
        if: always()
        run: docker compose down -v
