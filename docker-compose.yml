<<<<<<< HEAD

services:
  # --- Base de données MongoDB ---
  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
=======
version: "3.9"
services:
  mongo:
    container_name: codearena-mongo
    image: mongo:6
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: codearena
    ports:
      - "${MONGO_BIND_HOST:-127.0.0.1}:${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend-network

  mongo-express:
    container_name: codearena-mongo-express
    image: mongo-express
    restart: unless-stopped
    ports:
      - "${MONGO_EXPRESS_BIND_HOST:-127.0.0.1}:${MONGO_EXPRESS_PORT:-8081}:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootpassword
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongo
>>>>>>> origin/codex/review-project-and-provide-feedback-kmcakh
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet -u ${MONGO_ROOT_USER} -p ${MONGO_ROOT_PASS} --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 }).ok' | grep 1"]
      interval: 5s
      timeout: 3s
      retries: 10

<<<<<<< HEAD
  # --- API Backend (Node.js / Express) ---
  api:
    build: ./api
    container_name: codearena_api
    restart: unless-stopped
    ports:
      - "3000:5000"   # Port externe 3000 → interne 5000 du server.js
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 5000
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
      MONGODB_URI: ${MONGODB_URI} 

    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - backend-network
    command: node src/index.js  # Lancement du serveur principal

  # --- Frontend Web (React + Vite) ---
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: codearena_web
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: ${VITE_API_URL}
      HOST: "0.0.0.0"
=======
  api:
    container_name: codearena-api
    build:
      context: .
      dockerfile: ./api/Dockerfile
    ports:
      - "${API_BIND_HOST:-127.0.0.1}:${API_PORT:-3000}:3000"
    depends_on:
      - mongo
    networks:
      - backend-network

  web:
    container_name: codearena-web
    build: ./web
    ports:
      - "${WEB_BIND_HOST:-0.0.0.0}:${WEB_PORT:-5173}:5173"
>>>>>>> origin/codex/review-project-and-provide-feedback-kmcakh
    depends_on:
      - api
    networks:
      - backend-network

  # --- Sandbox sécurisé pour exécution de code Python ---
  sandbox:
    build: ./runner
    container_name: codearena_sandbox
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      TIMEOUT: ${TIMEOUT}
      MEMORY_LIMIT: ${MEMORY_LIMIT}
    networks:
      - backend-network
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./runner:/app   # Monte le dossier runner local dans /app du conteneur

volumes:
  mongo_data:

networks:
  backend-network:
    driver: bridge




